{"version":3,"sources":["SettingsList.jsx","utils/callCRMAPI.js","SettingsPage.jsx","TagInput.jsx","FieldCriteriaTable.jsx","SettingsForm.jsx","utils/processFieldCriteria.js","EditSettingsPage.jsx","App.js","serviceWorker.js","index.js"],"names":["SettingsList","state","searchText","filteredStatus","columnIndex","getColumnSearchProps","dataIndex","columnName","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","searchInput","placeholder","value","onChange","e","target","onPressEnter","handleSearch","width","marginBottom","display","type","onClick","icon","size","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","setState","handleChange","pagination","filters","clearAllFilters","clearFiltersButton","margin","message","props","this","columns","title","key","currentRow","handleEditRecord","id","Content","background","dataSource","data","expandedRowRender","React","Component","loadRoundRobinSettings","a","window","ZOHO","embeddedApp","init","CRM","API","getAllRecords","Entity","roundRobinSettings","map","roundRobinSetting","ownerName","name","loadRoundRobinSetting","recordID","getRecord","RecordID","activeUsersCache","loadActiveUsers","length","getAllUsers","Type","activeUsers","users","fieldsByModuleCache","loadFields","moduleName","META","getFields","fields","updateRoundRobinSetting","newData","updateRecord","APIData","Trigger","result","loading","error","fetchRoundRobinSettings","setPage","page","Header","position","left","zIndex","gutter","span","alignSelf","Title","tip","header","content","TagInput","inputVisible","inputValue","handleClose","removedTag","tags","filter","tag","showInput","input","focus","handleInputChange","handleInputConfirm","indexOf","saveInputRef","index","isLongTag","tagElem","closable","onClose","slice","onBlur","borderStyle","comparisonTypes","label","EditableContext","createContext","FieldCriteriaTable","fieldCriteriaColumns","editable","desiredInputType","possibleOptions","tagName","editingKey","isEditing","Consumer","form","save","onConfirm","cancel","disabled","edit","addRow","push","possibleValues","validateFields","row","findIndex","item","splice","fieldsForThisModule","col","onCell","editing","components","body","cell","getInput","field","Option","api_name","field_label","option","renderCell","contextData","getFieldDecorator","inputType","children","restProps","Item","rules","required","initialValue","Provider","bordered","rowClassName","UnwrappedEditSettingForm","layout","labelCol","wrapperCol","onSubmit","submitHandler","preventDefault","err","values","validateAndSubmit","Owner","user","full_name","Email","top","right","htmlType","EditSettingForm","Form","create","processFieldCriteria","stringFieldCriteria","rawFieldCriteria","JSON","parse","processedFieldCriteria","Object","keys","reduce","rawFieldName","fieldName","trim","split","forEach","criterion","criterionParts","comparisonType","expectedValue","resultKey","processedCriterion","fieldCriterionKey","criteriaParts","concat","console","generateFieldCriteriaJSON","fieldCriteriaArray","fieldCriteriaObject","fieldCriteriaRow","newRules","possibleValue","fieldCriteriaJSON","join","stringify","fetchRoundRobinSetting","fieldCriteriaForUI","handleSubmit","fieldCriteria","advancedroundrobin__Field_Criteria","Module","advancedroundrobin__Module","Percentage","advancedroundrobin__Percent","email","advancedroundrobin__Email","App","useState","currentPage","className","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92d92849.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert, Button, Icon, Input, Layout, Table } from 'antd';\nimport Highlighter from 'react-highlight-words';\n\nexport class SettingsList extends React.Component {\n  state = {\n    searchText: '',\n    filteredStatus: null,\n    columnIndex: 0\n  };\n\n  getColumnSearchProps = (dataIndex, columnName) => ({\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters\n    }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            ref={node => {\n              this.searchInput = node;\n            }}\n            placeholder={`Search ${columnName}`}\n            value={selectedKeys[0]}\n            onChange={e =>\n              setSelectedKeys(e.target.value ? [e.target.value] : [])\n            }\n            onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm)}\n            icon=\"search\"\n            size=\"small\"\n            style={{ width: 90, marginRight: 8 }}\n          >\n            Search\n        </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Reset\n        </Button>\n        </div>\n      ),\n\n    filterIcon: filtered => (\n      <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n    ),\n\n    onFilter: (value, record) => {\n      return record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase());\n    },\n\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n\n    render: text => (\n      <Highlighter\n        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n        searchWords={[this.state.searchText]}\n        autoEscape\n        textToHighlight={text ? text.toString() : ''}\n      />\n    )\n  });\n\n  handleSearch = (selectedKeys, confirm) => {\n    confirm();\n    this.setState({ searchText: selectedKeys[0] });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  handleChange = (pagination, filters) => {\n    this.setState({ filteredStatus: filters });\n  };\n\n  clearAllFilters = () => {\n    this.setState({\n      filteredStatus: null,\n      columnIndex: this.state.columnIndex + 1\n    });\n  };\n\n  clearFiltersButton = () => {\n    if (this.state.filteredStatus) {\n      return (<div style={{ margin: '16px' }}>\n        <Button onClick={this.clearAllFilters}>\n          {' '}\n          Clear all searches and filters{' '}\n        </Button>\n      </div>);\n    }\n  }\n\n  message = () => {\n    debugger;\n    if (this.props.message) {\n      return <Alert message={this.props.message} type=\"success\" />;\n    }\n  }\n\n  render() {\n    let { filteredStatus } = this.state;\n    filteredStatus = filteredStatus || {};\n    const columns = [\n      {\n        title: 'Owner',\n        dataIndex: 'ownerName',\n        key: 'ownerName',\n        ...this.getColumnSearchProps('ownerName', 'Owner'),\n      },\n      {\n        title: 'Percentage',\n        dataIndex: 'advancedroundrobin.Percent',\n        key: 'advancedroundrobin.Percent',\n      },\n      {\n        title: 'Module',\n        dataIndex: 'advancedroundrobin.Module',\n        key: 'advancedroundrobin.Module',\n        ...this.getColumnSearchProps('advancedroundrobin.Module', 'Module'),\n      },\n      {\n        title: 'Field Criteria',\n        dataIndex: 'advancedroundrobin.Field_Criteria',\n        key: 'advancedroundrobin.Field_Criteria',\n        ...this.getColumnSearchProps('advancedroundrobin.Field_Criteria', 'Field Criteria'),\n      },\n      {\n        title: 'Edit',\n        render: currentRow => {\n          return (\n            <Button onClick={() => this.props.handleEditRecord(currentRow.id)}>Edit</Button>\n          );\n        }\n      }\n    ];\n\n    return (\n      <Layout>\n        <Layout.Content style={{ background: '#fff' }}>\n          <div style={{ margin: '8px' }}>\n            {this.message()}\n            {this.clearFiltersButton()}\n            <Table\n              key={this.state.columnIndex}\n              columns={columns}\n              dataSource={this.props.data}\n              expandedRowRender={this.expandedRowRender}\n              onChange={this.handleChange}\n            />\n          </div>\n        </Layout.Content>\n      </Layout>\n    );\n  }\n}\n","export async function loadRoundRobinSettings() {\n  await window.ZOHO.embeddedApp.init();\n\n  const {\n    data: roundRobinSettings\n  } = await window.ZOHO.CRM.API.getAllRecords({\n    Entity: \"advancedroundrobin.Round_Robin_Settings\"\n  });\n\n  return roundRobinSettings.map((roundRobinSetting) => {\n    return {\n      ...roundRobinSetting,\n      ownerName: roundRobinSetting['advancedroundrobin.Owner'].name,\n      key: roundRobinSetting.id\n    };\n  });\n}\n\nexport async function loadRoundRobinSetting(recordID) {\n  await window.ZOHO.embeddedApp.init();\n\n  const {\n    data: roundRobinSetting\n  } = await window.ZOHO.CRM.API.getRecord({\n    Entity: \"advancedroundrobin.Round_Robin_Settings\",\n    RecordID: recordID\n  });\n\n  return roundRobinSetting[0];\n}\n\nlet activeUsersCache = [];\n\nexport async function loadActiveUsers() {\n  if (!activeUsersCache.length) {\n    await window.ZOHO.embeddedApp.init();\n\n    const { users: activeUsers } = await window.ZOHO.CRM.API.getAllUsers({\n      Type: \"ActiveUsers\"\n    });\n\n    activeUsersCache = activeUsers;\n    return activeUsers;\n  }\n\n  return activeUsersCache;\n}\n\nconst fieldsByModuleCache = {};\n\nexport async function loadFields(moduleName) {\n  if (fieldsByModuleCache[moduleName]) {\n    return fieldsByModuleCache[moduleName];\n  }\n  await window.ZOHO.embeddedApp.init();\n\n  const { fields } = await window.ZOHO.CRM.META.getFields({\n    Entity: moduleName\n  });\n\n  fieldsByModuleCache[moduleName] = fields;\n\n  return fields;\n}\n\nexport async function updateRoundRobinSetting(newData) {\n  await window.ZOHO.embeddedApp.init();\n\n  try {\n    const result = await window.ZOHO.CRM.API.updateRecord({\n      Entity: \"advancedroundrobin.Round_Robin_Settings\",\n      APIData: newData,\n      Trigger: [\"workflow\"]\n    });\n\n    debugger;\n    return result;\n  } catch (e) {\n    debugger;\n  }\n}\n","import React from 'react';\nimport { Col, Layout, Row, Spin, Typography } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport { SettingsList } from './SettingsList';\nimport { loadRoundRobinSettings } from './utils/callCRMAPI';\n\nexport default class extends React.Component {\n  state = { roundRobinSettings: [], loading: true, error: null };\n\n  componentDidMount() {\n    this.fetchRoundRobinSettings();\n  }\n\n  fetchRoundRobinSettings = async () => {\n    try {\n      const roundRobinSettings = await loadRoundRobinSettings();\n      this.setState({\n        loading: false,\n        roundRobinSettings\n      });\n    } catch (e) {\n      this.error = e;\n    }\n  };\n\n  header() {\n    return (\n      <Layout>\n        <Layout.Header\n          style={{\n            backgroundColor: '#F2410A',\n            display: 'flex',\n            position: 'fixed',\n            left: 0,\n            zIndex: 1,\n            width: '100%'\n          }}\n        >\n          <Row gutter={16} style={{ width: '100%' }}>\n            <Col span={24}>\n              <Typography style={{ padding: '5px', alignSelf: 'center' }}>\n                <Typography.Title\n                  style={{\n                    padding: '5px',\n                    alignSelf: 'center',\n                    color: 'white'\n                  }}\n                >\n                  Round Robin Settings\n                </Typography.Title>\n              </Typography>\n            </Col>\n          </Row>\n        </Layout.Header>\n      </Layout>\n    );\n  }\n\n  handleEditRecord = (recordID) => {\n    this.props.setPage({\n      page: 'edit_setting',\n      recordID\n    });\n  }\n\n  content() {\n    if (!this.state.loading && this.state.roundRobinSettings.length) {\n      return (<SettingsList\n        data={this.state.roundRobinSettings}\n        handleEditRecord={this.handleEditRecord}\n        message={this.props.message}\n      />);\n    }\n\n    return <Spin tip=\"Loading...\" />\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Layout.Header>\n          {this.header()}\n        </Layout.Header>\n        <Layout.Content>\n          {this.content()}\n        </Layout.Content>\n      </Layout>\n    );\n  }\n}\n","import { Tag, Input, Tooltip, Icon } from 'antd';\nimport React from 'react';\n\nexport class TagInput extends React.Component {\n  state = {\n    inputVisible: false,\n    inputValue: '',\n  };\n\n  handleClose = removedTag => {\n    const tags = this.props.tags.filter(tag => tag !== removedTag);\n\n    this.props.onChange(tags);\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { value: tags } = this.props;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n\n    this.setState({\n      inputVisible: false,\n      inputValue: '',\n    });\n\n    this.props.onChange(tags);\n  };\n\n  saveInputRef = input => (this.input = input);\n\n  render() {\n    const { inputVisible, inputValue } = this.state;\n    const { value: tags } = this.props;\n\n    return (\n      <div>\n        {tags.map((tag, index) => {\n          const isLongTag = tag.length > 20;\n          const tagElem = (\n            <Tag key={tag} closable={index !== 0} onClose={() => this.handleClose(tag)}>\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </Tag>\n          );\n          return isLongTag ? (\n            <Tooltip title={tag} key={tag}>\n              {tagElem}\n            </Tooltip>\n          ) : (\n              tagElem\n            );\n        })}\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && (\n          <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n            <Icon type=\"plus\" /> Add\n          </Tag>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from 'react';\n\nimport { TagInput } from './TagInput';\n\nimport {\n  Button,\n  Form,\n  Popconfirm,\n  Input,\n  Select,\n  Table,\n  Tag\n} from 'antd';\n\nconst comparisonTypes = [\n  {\n    label: 'Not Equal',\n    value: 'notequal'\n  },\n  {\n    label: 'Equals',\n    value: 'equal'\n  },\n  {\n    label: 'Contains',\n    value: 'contains'\n  },\n  {\n    label: \"Doesn't Contain\",\n    value: 'notcontains'\n  },\n  {\n    label: \"Starts With\",\n    value: 'starts_with'\n  },\n  {\n    label: \"Doesn't Start With\",\n    value: 'not_starts_with'\n  },\n  {\n    label: 'Multi Select Equal',\n    value: 'multi-select-equal'\n  },\n  {\n    label: 'Not Empty',\n    value: 'notempty'\n  },\n  {\n    label: '>=',\n    value: '>='\n  },\n  {\n    label: '>',\n    value: '>'\n  },\n  {\n    label: '<=',\n    value: '<='\n  },\n  {\n    label: '<',\n    value: '<'\n  }\n];\n\nconst EditableContext = React.createContext();\n\nfunction composeEditableCell(fieldsForThisModule) {\n  return class EditableCell extends React.Component {\n    getInput = () => {\n      if (this.props.dataIndex === 'fieldName') {\n        return <Select style={{ width: 200 }} placeholder=\"Field Name\">\n          {fieldsForThisModule.map(field => (\n            <Select.Option key={field.api_name} value={field.api_name}>\n              {field.field_label}\n            </Select.Option>\n          ))}\n        </Select>\n      } else if (this.props.dataIndex === 'comparisonType') {\n        return <Select style={{ width: 200 }} placeholder=\"Comparison Type\">\n          {comparisonTypes.map(option => (\n            <Select.Option key={option.value} value={option.value}>\n              {option.label}\n            </Select.Option>\n          ))}\n        </Select>\n      } else if (this.props.dataIndex === 'possibleValues') {\n        return <TagInput />;\n      }\n      return <Input />;\n    };\n\n    renderCell = (contextData) => {\n      const { getFieldDecorator } = contextData;\n\n      const {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      } = this.props;\n      return (\n        <td {...restProps}>\n          {editing ? (\n            <Form.Item style={{ margin: 0 }}>\n              {getFieldDecorator(dataIndex, {\n                rules: [\n                  {\n                    required: true,\n                    message: `Please Input ${title}!`,\n                  },\n                ],\n                initialValue: record[dataIndex],\n              })(this.getInput())}\n            </Form.Item>\n          ) : (\n              children\n            )}\n        </td>\n      );\n    };\n\n    render() {\n      return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n    }\n  }\n}\n\nexport class FieldCriteriaTable extends React.Component {\n\n  fieldCriteriaColumns = [\n    {\n      title: 'Field Name',\n      dataIndex: 'fieldName',\n      key: 'fieldName',\n      editable: true,\n      desiredInputType: 'select',\n      possibleOptions: ['TODO']\n    },\n    {\n      title: 'Comparison Type',\n      dataIndex: 'comparisonType',\n      key: 'comparisonType',\n      editable: true,\n      desiredInputType: 'select',\n      possibleOptions: comparisonTypes\n    },\n    {\n      title: 'Possible Values',\n      dataIndex: 'possibleValues',\n      key: 'possibleValues',\n      width: '40%',\n      editable: true,\n      desiredInputType: 'tags',\n      render: (tags) => {\n        return <Fragment>\n          {tags.map((tagName) => <Tag key={tagName} closable={false}>{tagName}</Tag>)}\n        </Fragment>\n      }\n    },\n    {\n      title: 'Save',\n      dataIndex: 'operation',\n      render: (text, record) => {\n        const { editingKey } = this.state;\n        const editable = this.isEditing(record);\n        return editable ? (\n          <span>\n            <EditableContext.Consumer>\n              {form => (\n                <Button\n                  onClick={() => this.save(form, record.key)}\n                  style={{ marginRight: 8 }}\n                >\n                  Save\n                </Button>\n              )}\n            </EditableContext.Consumer>\n            <Popconfirm title=\"Are you sure you want to cancel?\" onConfirm={() => this.cancel(record.key)}>\n              <Button>Cancel</Button>\n            </Popconfirm>\n          </span>\n        ) : (\n            <Button disabled={editingKey !== ''} onClick={() => this.edit(record.key)}>\n              Edit\n            </Button>\n          );\n      },\n    },\n  ];\n\n  state = {\n    editingKey: '',\n    loading: true,\n  };\n\n  isEditing = record => record.key === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      const newData = [...this.props.value];\n      const index = newData.findIndex(item => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        this.setState({ editingKey: '' });\n      } else {\n        newData.push(row);\n        this.setState({ editingKey: '' });\n      }\n\n      this.props.onChange(newData);\n    });\n  }\n\n  edit(key) {\n    this.setState({ editingKey: key });\n  }\n\n  addRow = () => {\n    const newData = [...this.props.value];\n    newData.push({ possibleValues: [] });\n\n    this.props.onChange(newData);\n  }\n\n  render() {\n    const fieldCriteriaColumns = this.fieldCriteriaColumns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record),\n        }),\n      };\n    });\n\n    const components = {\n      body: {\n        cell: composeEditableCell(this.props.fieldsForThisModule),\n      },\n    };\n\n    return (\n      <Fragment>\n        <Button onClick={this.addRow}>Add Row</Button>\n        <EditableContext.Provider value={this.props.form}>\n          <Table\n            components={components}\n            bordered\n            dataSource={this.props.value}\n            columns={fieldCriteriaColumns}\n            rowClassName=\"editable-row\"\n            pagination={{\n              onChange: this.cancel,\n            }}\n          />\n        </EditableContext.Provider>\n      </Fragment>\n    );\n  }\n}\n","import {\n  Button,\n  Form,\n  Input,\n  InputNumber,\n  Select,\n} from 'antd';\nimport React from 'react';\n\nimport { FieldCriteriaTable } from './FieldCriteriaTable';\n\nconst validateAndSubmit = (e, validateFields, submitHandler) => {\n  e.preventDefault();\n  validateFields((err, values) => {\n    if (!err) {\n      submitHandler(values);\n    }\n  });\n};\n\nclass UnwrappedEditSettingForm extends React.Component {\n  render() {\n    const { data, activeUsers, form } = this.props;\n    const { getFieldDecorator } = form;\n\n    return (\n      <div style={{ padding: '40px' }}>\n        <Form\n          layout=\"vertical\"\n          labelCol={{ span: 3 }}\n          wrapperCol={{ span: 12 }}\n          onSubmit={e =>\n            validateAndSubmit(\n              e,\n              this.props.form.validateFields,\n              this.props.onSubmit\n            )\n          }\n        >\n          <Form.Item label=\"Owner\">\n            {getFieldDecorator('Owner', {\n              initialValue: data.Owner.id\n            })(\n              <Select style={{ width: 200 }} placeholder=\"Owner\">\n                {activeUsers.map(user => (\n                  <Select.Option value={user.id} key={user.id}>\n                    {user.full_name}\n                  </Select.Option>\n                ))}\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Module\">\n            {getFieldDecorator('Module', {\n              initialValue: data['advancedroundrobin.Module']\n            })(\n              <Select style={{ width: 200 }} placeholder=\"Module\">\n                {['Leads', 'Contacts', 'Deals'].map(moduleName => (\n                  <Select.Option key={moduleName} value={moduleName}>\n                    {moduleName}\n                  </Select.Option>\n                ))}\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Percentage\">\n            {getFieldDecorator('Percentage', {\n              initialValue: data['advancedroundrobin.Percent']\n            })(\n              <InputNumber />\n            )}\n          </Form.Item>\n          <Form.Item label=\"Email For Notifications\">\n            {getFieldDecorator('email', {\n              initialValue: data.Email\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Field Criteria\">\n            {getFieldDecorator('fieldCriteria', {\n              initialValue: data[\"fieldCriteriaForUI\"]\n            })(< FieldCriteriaTable form={form} fieldsForThisModule={data['fieldsForThisModule']} />)}\n          </Form.Item>\n          <Form.Item style={{ position: 'fixed', top: '70px', right: '10px' }}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Save\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport const EditSettingForm = Form.create({\n  name: 'edit_round_robin_setting',\n})(UnwrappedEditSettingForm);\n","export function processFieldCriteria(stringFieldCriteria) {\n  /* field criteria is a JSON blob like:\n  {\n    \"Lead_Source\": \"equals:Facebook,notequal:foo,Blah\",\n    \"Lead_Status\": \"New Lead,Old Lead\"\n  }\n\n  The old version involved manually typing the JSON out and was prone to error.\n\n  We need to convert it into an array of objects like:\n  [\n    { fieldName: \"Lead_Source\", comparisonType: \"equals\", possibleValues: [\"Facebook\", \"Blah\"] },\n    { fieldName: \"Lead_Source\", comparisonType: \"notequal\", possibleValues: [\"foo\"] },\n    { fieldName: \"Lead_Status\", comparisonType: \"equals\", possibleValues: [\"New Lead\", \"Old Lead\"] },\n  ]\n\n  This data can be used to populate the UI\n  */\n  if (stringFieldCriteria) {\n    try {\n      const rawFieldCriteria = JSON.parse(stringFieldCriteria);\n      const fields = Object.keys(rawFieldCriteria);\n      const processedFieldCriteria = fields.reduce((result, rawFieldName) => {\n        const fieldName = rawFieldName.trim();\n        const criteriaForThisField = rawFieldCriteria[fieldName].split(\",\");\n\n        criteriaForThisField.forEach(criterion => {\n          const criterionParts = criterion.split(\":\");\n          if (criterionParts.length > 1) {\n            const comparisonType = criterionParts[0].trim();\n            const expectedValue = criterionParts[1].trim();\n            const resultKey = `${fieldName}::${comparisonType}`;\n            if (!result[resultKey]) {\n              result[resultKey] = [];\n            }\n\n            if (expectedValue.length > 0) {\n              result[resultKey].push(expectedValue);\n            }\n\n          } else {\n            const resultKey = `${fieldName}::equals`;\n            if (!result[resultKey]) {\n              result[resultKey] = [];\n            }\n\n            const processedCriterion = criterion.trim();\n\n            if (processedCriterion.length > 0) {\n              result[resultKey].push(processedCriterion);\n            }\n          }\n        });\n\n        return result;\n      }, {});\n\n      return Object.keys(processedFieldCriteria).reduce(\n        (result, fieldCriterionKey) => {\n          const criteriaParts = fieldCriterionKey.split(\"::\");\n          return result.concat({\n            fieldName: criteriaParts[0],\n            comparisonType: criteriaParts[1].trim(),\n            possibleValues: processedFieldCriteria[fieldCriterionKey]\n          });\n        },\n        []\n      );\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n\n  return [];\n}\n\nexport function generateFieldCriteriaJSON(fieldCriteriaArray) {\n  /*\n  Convert:\n  [\n    { fieldName: \"Lead_Source\", comparisonType: \"equals\", possibleValues: [\"Facebook\", \"Blah\"] },\n    { fieldName: \"Lead_Source\", comparisonType: \"notequal\", possibleValues: [\"foo\"] },\n    { fieldName: \"Lead_Status\", comparisonType: \"equals\", possibleValues: [\"New Lead\", \"Old Lead\"] },\n  ]\n\n  back to\n  {\n    \"Lead_Source\": \"equals:Facebook,notequal:foo,Blah\",\n    \"Lead_Status\": \"New Lead,Old Lead\"\n  }\n  */\n\n  const fieldCriteriaObject = fieldCriteriaArray.reduce((result, fieldCriteriaRow) => {\n    if (!result[fieldCriteriaRow.fieldName]) {\n      result[fieldCriteriaRow.fieldName] = [];\n    }\n\n    const newRules = fieldCriteriaRow.possibleValues.map((possibleValue) => {\n      return `${fieldCriteriaRow.comparisonType}:${possibleValue}`\n    });\n\n    result[fieldCriteriaRow.fieldName].push(newRules);\n    return result;\n  }, {});\n\n  const fieldCriteriaJSON = Object.keys(fieldCriteriaObject).reduce((result, fieldName) => {\n    result[fieldName] = fieldCriteriaObject[fieldName].join(',');\n    return result;\n  }, {});\n\n  return JSON.stringify(fieldCriteriaJSON);\n}\n","import React from \"react\";\nimport { Col, Layout, Row, Spin, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nimport { EditSettingForm } from \"./SettingsForm\";\nimport {\n  loadActiveUsers,\n  loadRoundRobinSetting,\n  updateRoundRobinSetting\n} from \"./utils/callCRMAPI\";\nimport {\n  processFieldCriteria,\n  generateFieldCriteriaJSON\n} from \"./utils/processFieldCriteria\";\nimport { loadFields } from \"./utils/callCRMAPI\";\n\nexport default class extends React.Component {\n  state = {\n    roundRobinSetting: null,\n    loading: true,\n    error: null,\n    activeUsers: []\n  };\n\n  componentDidMount() {\n    this.fetchRoundRobinSetting();\n  }\n\n  fetchRoundRobinSetting = async () => {\n    try {\n      const roundRobinSetting = await loadRoundRobinSetting(\n        this.props.recordID\n      );\n      const activeUsers = await loadActiveUsers();\n\n      const rawFieldCriteria =\n        roundRobinSetting[\"advancedroundrobin.Field_Criteria\"];\n\n      const fieldCriteriaForUI = processFieldCriteria(rawFieldCriteria).map(\n        row => {\n          return {\n            ...row,\n            key: `${row.fieldName}${row.comparisonType}`\n          };\n        }\n      );\n\n      const moduleName = roundRobinSetting[\"advancedroundrobin.Module\"];\n\n      const fieldsForThisModule = await loadFields(moduleName);\n\n      this.setState({\n        loading: false,\n        roundRobinSetting: {\n          ...roundRobinSetting,\n          fieldCriteriaForUI,\n          fieldsForThisModule\n        },\n        activeUsers\n      });\n    } catch (e) {\n      this.error = e;\n    }\n  };\n\n  header() {\n    return (\n      <Layout>\n        <Layout.Header\n          style={{\n            backgroundColor: \"#F2410A\",\n            display: \"flex\",\n            position: \"fixed\",\n            left: 0,\n            zIndex: 1,\n            width: \"100%\"\n          }}\n        >\n          <Row gutter={16} style={{ width: \"100%\" }}>\n            <Col span={24}>\n              <Typography style={{ padding: \"5px\", alignSelf: \"center\" }}>\n                <Typography.Title\n                  style={{\n                    padding: \"5px\",\n                    alignSelf: \"center\",\n                    color: \"white\"\n                  }}\n                >\n                  Edit Round Robin Setting\n                </Typography.Title>\n              </Typography>\n            </Col>\n          </Row>\n        </Layout.Header>\n      </Layout>\n    );\n  }\n\n  handleSubmit = async (data) => {\n    this.setState({ loading: true });\n    const fieldCriteriaJSON = generateFieldCriteriaJSON(data.fieldCriteria);\n\n    await updateRoundRobinSetting({\n      ...this.state.roundRobinSetting,\n      \"advancedroundrobin.Field_Criteria\": fieldCriteriaJSON,\n      advancedroundrobin__Field_Criteria: fieldCriteriaJSON,\n      \"advancedroundrobin.Module\": data.Module,\n      advancedroundrobin__Module: data.Module,\n      Owner: { id: data.Owner },\n      \"advancedroundrobin.Percent\":\n        data.Percentage > 99 ? 99 : data.Percentage,\n      advancedroundrobin__Percent:\n        data.Percentage > 99 ? 99 : data.Percentage,\n      \"advancedroundrobin.Email\": data.email,\n      advancedroundrobin__Email: data.email,\n      Email: data.email\n    });\n\n    this.setState({ loading: false });\n\n    this.props.setPage({\n      page: 'list_settings',\n      message: 'Setting updated'\n    });\n  }\n\n  content() {\n    if (!this.state.loading && this.state.roundRobinSetting) {\n      return (\n        <EditSettingForm\n          activeUsers={this.state.activeUsers}\n          data={this.state.roundRobinSetting}\n          onSubmit={this.handleSubmit}\n        />\n      );\n    }\n\n    return <Spin tip=\"Loading...\" />;\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Layout.Header>{this.header()}</Layout.Header>\n        <Layout.Content>{this.content()}</Layout.Content>\n      </Layout>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport SettingsPage from './SettingsPage';\nimport EditSettingsPage from './EditSettingsPage';\n\n// hook for useState here\n// figure out what page to display\nfunction App() {\n  const [currentPage, setPage] = useState({\n    page: 'list_settings'\n  });\n\n  if (currentPage.page === 'list_settings') {\n    debugger;\n    return (\n      <div className=\"App\">\n        <SettingsPage setPage={setPage} message={currentPage.message} />\n      </div>\n    )\n  } else if (currentPage.page === 'edit_setting') {\n    return (\n      <div className=\"App\">\n        <EditSettingsPage setPage={setPage} recordID={currentPage.recordID} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}